{"version":3,"sources":["serviceWorker.js","Board.js","Grid.js","Game.js","index.js"],"names":["Boolean","window","location","hostname","match","Board","w","h","m","this","width","height","mineCount","reset","array","i","length","j","Math","floor","random","r","c","count","off_c","off_r","get","isOutOfBounds","trueValues","displayValues","value","val","getDisplay","isShowing","console","log","r_off","c_off","reveal","state","checkForWin","doVictory","Array","fill","map","_","shuffle","set","countAdjacent","Square","content","props","showing","className","src","onClick","onContextMenu","React","Component","Grid","clickedRecently","button","undefined","handleLeftClick","bind","handleRightClick","handleDoubleClick","rows","board","cols","key","clearTimeout","clickTimeout","setTimeout","Game","mines","statusMessage","grid","setState","revealAdjacent","mark","body","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e1d6c55.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export class Board {\n    displayValues;\n    trueValues;\n    width;\n    height;\n    mineCount;\n    state;\n\n    constructor(w,h,m) {\n        this.width = w;\n        this.height = h;\n        this.mineCount = m;\n\n        this.reset(w,h,m);\n    }\n    // Fisher-Yates implementation from https://javascript.info/task/shuffle\n    shuffle(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n    \n            // swap elements array[i] and array[j]\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n    countAdjacent(r, c) {\n        let count = 0;\n        for(const off_c of [-1,0,1]) {\n            for(const off_r of [-1,0,1]) {\n                if(this.get(r + off_r, c + off_c) === 'X') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    get(r, c) {\n        if(this.isOutOfBounds(r,c)) {\n            return '';\n        }\n        return this.trueValues[c + r * this.width];\n    }\n    getDisplay(r, c) {\n        return this.displayValues[c + r * this.width];\n    }\n    set(r, c, value) {\n        this.trueValues[c + r * this.width] = value;\n    }\n    isOutOfBounds(r, c) {\n        return r < 0 || c < 0 || r >= this.height || c >= this.width;\n    }\n    isShowing(r, c) {\n        const val = this.getDisplay(r,c);\n        return !(val === '?' || val ==='x')\n    }\n    reveal(r, c) {\n        if(this.isOutOfBounds(r, c)) {\n            return;\n        }\n        if(this.isShowing(r, c)) {\n            return;\n        }\n        if(this.displayValues[c + r * this.width] === 'x') {\n            return;\n        }\n\n        // Grab the value being revealed\n        const value = this.trueValues[c + r * this.width];\n\n        // Set the display value to the revealed value\n        console.log('reveal: ' + this.displayValues[c + r * this.width] + '->' + value);\n        this.displayValues[c + r * this.width] = value;\n\n        // If there are no adjacent mines, propagate to reveal adjacent tiles\n        if(value === 0) {\n            console.log('propagate!')\n            for(let r_off of [-1,0,1]) \n                for(let c_off of [-1,0,1]) \n                    if(!(r_off === 0 && c_off === 0))\n                        this.reveal(r + r_off, c + c_off);\n        } else if(value === 'X') {\n            this.state = 'lost';\n        }\n        if(!(this.state === 'lost') && this.checkForWin()) {\n            this.state = 'won';\n            this.doVictory();\n        }\n    }\n    revealAdjacent(r, c) {\n        for(let r_off of [-1,0,1]) {\n            for(let c_off of [-1,0,1]) {\n                if(r_off === 0 && c_off === 0)\n                    continue;\n                this.reveal(r + r_off, c + c_off);\n            }\n        }\n    }\n    checkForWin() {\n        console.log('Checking for win...');\n        for(let i=0;i<this.trueValues.length;i++) {\n            // If the tile is empty\n            if(this.trueValues[i] !== 'X') {\n                // If the tile hasn't been revealed\n                if(this.displayValues[i] !== this.trueValues[i]) {\n                    // Then there is an empty tile left, so no win yet\n                    console.log('Nope!');\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    doVictory() {\n        for(let i=0;i<this.trueValues.length;i++) {\n            if(this.trueValues[i] === 'X')\n                this.displayValues[i] = 'x';\n            else\n                this.displayValues[i] = this.trueValues[i];\n        }\n    }\n    mark(r, c) {\n        if(this.isOutOfBounds(r, c))\n            return;\n        switch(this.getDisplay(r, c)) {\n            case '?':\n                this.displayValues[c + r * this.width] = 'x';\n                break;\n            case 'x':\n                this.displayValues[c + r * this.width] = '?';\n                break;\n            default:\n                break;\n        }\n    }\n    reset(w,h,m) {\n        this.state = 'active';\n\n        // Initialize with an empty array of size w * h\n        this.displayValues = Array(w*h).fill('?');\n        this.trueValues = Array(w*h).fill();\n        \n        // Set the first m values to be mines, and the rest to empty tiles\n        this.trueValues = this.trueValues.map((_, i) => (i < m) ? 'X' : '');\n\n        // Shuffle the mines into random locations\n        this.shuffle(this.trueValues);\n\n        // Count adjacent mines and update the board with the counts\n        for(let c = 0; c < this.width; c++) {\n            for(let r = 0; r < this.height; r++) {\n                if(this.get(r, c) !== 'X') {\n                    this.set(r, c, this.countAdjacent(r, c));\n                }\n            }\n        }\n    }\n}\n","import React from 'react';\nimport './Grid.css';\nimport { Board } from './Board';\n\nexport class Square extends React.Component {\n    render() {\n        const value = this.props.value;\n        const showing = this.props.showing;\n        if(showing) {\n            let content;\n            if(typeof(value) === 'number') {\n                if(value > 0)\n                    content = <img className='tile' src={'assets/' + value + '.png'} />\n                else \n                    content = ''\n            } else {\n                if(value === 'X')\n                    content = <img className='tile mine' src={'assets/mine.png'} />\n                else\n                    content = ''\n            }\n\n            return (<td className={'revealed square square-' + value} \n                        onClick={this.props.onClick}\n                        onContextMenu={this.props.onContextMenu}>{content}</td>)\n        } else {\n            let content = ''\n            if(this.props.value === 'x')\n                content = <img className='tile' src={'assets/flag.png'} />\n            return (<td className={'secret square'} \n                        onClick={this.props.onClick}\n                        onContextMenu={this.props.onContextMenu}>{content}</td>)\n        }\n    }\n}\n\nexport class Grid extends React.Component {\n    \n    clickedRecently = {button: undefined, r:-1, c:-1};\n\n    constructor(props) {\n        super(props);\n        this.handleLeftClick = this.handleLeftClick.bind(this);\n        this.handleRightClick = this.handleRightClick.bind(this);\n        this.handleDoubleClick = this.handleDoubleClick.bind(this);\n    }\n    render() {\n        const rows = this.props.board.height;\n        const cols = this.props.board.width;\n        const board = this.props.board;\n        console.log(this.props);\n\n        // Loop over rows, then columns, adding <tr> and <td> tags respectively\n        const content = Array(rows).fill().map((_, r) => (\n            <tr key={r}>\n                {Array(cols).fill().map((_, c) => (\n                    <Square value={board.getDisplay(r,c)} \n                            showing={board.isShowing(r,c)} \n                            key={c} \n                            onClick={() => this.handleLeftClick(r,c)}\n                            onContextMenu={() => this.handleRightClick(r,c)}\n                            />\n                ))}\n            </tr>\n        ));            \n        return (\n            <table className={'grid grid-' + board.state}>\n                <tbody>\n                {content}\n                </tbody>\n            </table>\n            )\n    }\n    handleLeftClick(r,c) {\n        this.props.handleLeftClick(r,c)\n        if(this.clickedRecently.button === 'right'\n          && this.clickedRecently.r === r\n          && this.clickedRecently.c === c) {\n            clearTimeout(this.clickTimeout);\n            this.clickedRecently = {button: undefined,r:-1,c:-1};\n            this.clickTimeout = undefined;\n            this.handleDoubleClick(r,c);\n        } else {\n            clearTimeout(this.clickTimeout);\n            this.clickedRecently = {button: 'left',r: r,c: c};\n            this.clickTimeout = setTimeout(() => {\n                this.clickedRecently = {button: undefined,r:-1,c:-1};\n            }, 200);\n        }\n    }\n    handleRightClick(r,c){\n        this.props.handleRightClick(r,c);\n        if(this.clickedRecently.button === 'left'\n          && this.clickedRecently.r === r\n          && this.clickedRecently.c === c) {\n            clearTimeout(this.clickTimeout);\n            this.clickedRecently = {button: undefined,r:-1,c:-1};\n            this.clickTimeout = undefined;\n            this.handleDoubleClick(r,c);\n        } else {\n            clearTimeout(this.clickTimeout);\n            this.clickedRecently = {button: 'right',r: r,c: c};\n            this.clickTimeout = setTimeout(() => {\n                this.clickedRecently = {button: undefined,r:-1,c:-1};\n            }, 200);\n        }\n    }\n    handleDoubleClick(r,c) {\n        console.log('double clicked!');\n        this.props.handleDoubleClick(r,c);\n    }\n}","import React from 'react'\nimport { Board } from './Board'\nimport { Grid } from './Grid'\n\nexport class Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: new Board(props.width, props.height, props.mines)\n        };\n    }\n    render() {\n        const board = this.state.board;\n        const grid =  <Grid board={board}\n                        handleLeftClick={(r,c) => this.handleLeftClick(r,c)}\n                        handleRightClick={(r,c) => this.handleRightClick(r,c)}\n                        handleDoubleClick={(r,c) => this.handleDoubleClick(r,c)}/>\n        let statusMessage;\n        if(board.state === 'lost') {\n            statusMessage = <div>You lost.</div>\n        } else if(board.state === 'won') {\n            statusMessage = <div>You won!</div>\n        } else {\n            statusMessage = <div>Click on tiles to reveal them.</div>\n        }\n        return (\n            <div>\n                {grid}\n                {statusMessage}\n                <div className=\"row\"><button onClick={() => this.reset()}>New Game</button></div>\n            </div>\n        )\n    }\n    reset() {\n        this.setState({board: new Board(this.props.width, this.props.height, this.props.mines)})\n    }\n    handleDoubleClick(r, c) {\n        let board = this.state.board;\n        if(!(board.state === 'active')) {\n            return;\n        }\n        board.revealAdjacent(r, c);\n        this.setState(board);\n    }\n    handleLeftClick(r, c) {\n        let board = this.state.board;\n        if(!(board.state === 'active')) {\n            return;\n        }\n        board.reveal(r, c);\n        this.setState({board: board});\n    }\n    handleRightClick(r, c){\n        let board = this.state.board;\n        if(!(board.state === 'active')) {\n            return;\n        }\n        board.mark(r, c);\n        this.setState({board: board});\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Game } from './Game';\n\nlet body = (\n    <div className=\"container\">\n        <div className=\"panel panel-primary\">\n            <div className=\"panel-heading\">\n                <h1 className=\"panel-title\">Mines Game</h1>\n            </div>\n            <div className=\"panel-body\">\n                <Game width={10} height={10} mines={15}/>\n            </div>\n        </div>\n    </div>\n)\nReactDOM.render(body, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}